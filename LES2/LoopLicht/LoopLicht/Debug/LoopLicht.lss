
LoopLicht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000021a  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b6  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b8  00000000  00000000  00000bda  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000364  00000000  00000000  00001292  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000015f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cb  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000234  00000000  00000000  000019e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001c1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e1       	ldi	r30, 0x1A	; 26
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 0b 01 	jmp	0x216	; 0x216 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:

//Setup
int main(void)
{
	// PB0 to PB5 output	
	DDRB |= (1<<DDB5) | (1<<DDB4) | (1<<DDB3) |
  96:	84 b1       	in	r24, 0x04	; 4
  98:	8f 63       	ori	r24, 0x3F	; 63
  9a:	84 b9       	out	0x04, r24	; 4
	(1<<DDB2) | (1<<DDB1) | (1<<DDB0);
	
	// PD7 Output
	DDRD |= (1<<DDD7);
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	80 68       	ori	r24, 0x80	; 128
  a0:	8a b9       	out	0x0a, r24	; 10
	
	// PD7 LOW
	PORTD &= ~(1<<PORTD7);
  a2:	8b b1       	in	r24, 0x0b	; 11
  a4:	8f 77       	andi	r24, 0x7F	; 127
  a6:	8b b9       	out	0x0b, r24	; 11
	
	// inputs PD3 to PD6 is by default an input pin and here enable pull up 
	PORTD |= (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3);	
  a8:	8b b1       	in	r24, 0x0b	; 11
  aa:	88 67       	ori	r24, 0x78	; 120
  ac:	8b b9       	out	0x0b, r24	; 11
	
	// Loop
	while (1)
	{
		// Bitmask voor knoppen
		unsigned char switches = PIND & 0b01111000;
  ae:	89 b1       	in	r24, 0x09	; 9
		
		// Check if K1 is pressed
		if((switches & (1<<PIND6)) == 0)
  b0:	86 fd       	sbrc	r24, 6
  b2:	1c c0       	rjmp	.+56     	; 0xec <main+0x56>
		{
			// Increment the delay
			delay_in_ms += 100;
  b4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  bc:	2c 59       	subi	r18, 0x9C	; 156
  be:	3f 4f       	sbci	r19, 0xFF	; 255
  c0:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  c4:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
			if(delay_in_ms > 1000)
  c8:	29 3e       	cpi	r18, 0xE9	; 233
  ca:	33 40       	sbci	r19, 0x03	; 3
  cc:	34 f0       	brlt	.+12     	; 0xda <main+0x44>
			{
				delay_in_ms = 1000;
  ce:	28 ee       	ldi	r18, 0xE8	; 232
  d0:	33 e0       	ldi	r19, 0x03	; 3
  d2:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d6:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	ef ef       	ldi	r30, 0xFF	; 255
  dc:	f0 e7       	ldi	r31, 0x70	; 112
  de:	22 e0       	ldi	r18, 0x02	; 2
  e0:	e1 50       	subi	r30, 0x01	; 1
  e2:	f0 40       	sbci	r31, 0x00	; 0
  e4:	20 40       	sbci	r18, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x4a>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x54>
  ea:	00 00       	nop
			// Debounce the switch
			_delay_ms(50);
		} 

		// Check if K2 is pressed
		if((switches & (1<<PIND5)) == 0)
  ec:	85 fd       	sbrc	r24, 5
  ee:	1c c0       	rjmp	.+56     	; 0x128 <main+0x92>
		{
			// Increment the delay
			delay_in_ms -= 100;
  f0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f8:	24 56       	subi	r18, 0x64	; 100
  fa:	31 09       	sbc	r19, r1
  fc:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 100:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
			if(delay_in_ms < 100)
 104:	24 36       	cpi	r18, 0x64	; 100
 106:	31 05       	cpc	r19, r1
 108:	34 f4       	brge	.+12     	; 0x116 <main+0x80>
			{
				delay_in_ms = 100;
 10a:	24 e6       	ldi	r18, 0x64	; 100
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 112:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 116:	3f ef       	ldi	r19, 0xFF	; 255
 118:	90 e7       	ldi	r25, 0x70	; 112
 11a:	e2 e0       	ldi	r30, 0x02	; 2
 11c:	31 50       	subi	r19, 0x01	; 1
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e0 40       	sbci	r30, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x86>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x90>
 126:	00 00       	nop
			// Debounce the switch
			_delay_ms(50);
		}	
		
		// Check if K3 is pressed
		if((switches & (1<<PIND4)) == 0)
 128:	84 fd       	sbrc	r24, 4
 12a:	0f c0       	rjmp	.+30     	; 0x14a <main+0xb4>
		{
			// Set Direction
			direction = 1;
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <direction+0x1>
 134:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <direction>
 138:	ff ef       	ldi	r31, 0xFF	; 255
 13a:	20 e7       	ldi	r18, 0x70	; 112
 13c:	32 e0       	ldi	r19, 0x02	; 2
 13e:	f1 50       	subi	r31, 0x01	; 1
 140:	20 40       	sbci	r18, 0x00	; 0
 142:	30 40       	sbci	r19, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0xa8>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0xb2>
 148:	00 00       	nop
			// Debounce the switch
			_delay_ms(50);
		}
		
		// Check if K4 is pressed
		if((switches & (1<<PIND3)) == 0)
 14a:	83 fd       	sbrc	r24, 3
 14c:	0d c0       	rjmp	.+26     	; 0x168 <main+0xd2>
		{
			// Set Direction
			direction = 0;
 14e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <direction+0x1>
 152:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <direction>
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	90 e7       	ldi	r25, 0x70	; 112
 15a:	e2 e0       	ldi	r30, 0x02	; 2
 15c:	81 50       	subi	r24, 0x01	; 1
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	e0 40       	sbci	r30, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0xc6>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0xd0>
 166:	00 00       	nop
			// Debounce the switch
			_delay_ms(50);
		}
		
		// Check Direction
		if(direction == 1)
 168:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <direction>
 16c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <direction+0x1>
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	31 f1       	breq	.+76     	; 0x1c0 <main+0x12a>
 174:	65 e0       	ldi	r22, 0x05	; 5
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	4b c0       	rjmp	.+150    	; 0x210 <main+0x17a>
		{
			for(int i = 0; i < 6; i++)
			{
				PORTB |= (1<<i);
 17a:	85 b1       	in	r24, 0x05	; 5
 17c:	41 e0       	ldi	r20, 0x01	; 1
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	06 2e       	mov	r0, r22
 182:	02 c0       	rjmp	.+4      	; 0x188 <main+0xf2>
 184:	44 0f       	add	r20, r20
 186:	55 1f       	adc	r21, r21
 188:	0a 94       	dec	r0
 18a:	e2 f7       	brpl	.-8      	; 0x184 <main+0xee>
 18c:	84 2b       	or	r24, r20
 18e:	85 b9       	out	0x05, r24	; 5
				for(int i=0; i<delay_in_ms; i++)
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	07 c0       	rjmp	.+14     	; 0x1a4 <main+0x10e>
 196:	ef e9       	ldi	r30, 0x9F	; 159
 198:	ff e0       	ldi	r31, 0x0F	; 15
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <main+0x104>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x10a>
 1a0:	00 00       	nop
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ac:	82 17       	cp	r24, r18
 1ae:	93 07       	cpc	r25, r19
 1b0:	94 f3       	brlt	.-28     	; 0x196 <main+0x100>
				{
					_delay_ms(1);
				}
				PORTB &= ~(1<<i);
 1b2:	85 b1       	in	r24, 0x05	; 5
 1b4:	40 95       	com	r20
 1b6:	48 23       	and	r20, r24
 1b8:	45 b9       	out	0x05, r20	; 5
		}
		
		// Check Direction
		if(direction == 1)
		{
			for(int i = 0; i < 6; i++)
 1ba:	6f 5f       	subi	r22, 0xFF	; 255
 1bc:	7f 4f       	sbci	r23, 0xFF	; 255
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <main+0x12e>
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	66 30       	cpi	r22, 0x06	; 6
 1c6:	71 05       	cpc	r23, r1
 1c8:	c4 f2       	brlt	.-80     	; 0x17a <main+0xe4>
 1ca:	71 cf       	rjmp	.-286    	; 0xae <main+0x18>
			}	
		} else
		{
			for(int i = 5; i >= 0; i--)
			{
				  PORTB |= (1<<i);
 1cc:	85 b1       	in	r24, 0x05	; 5
 1ce:	41 e0       	ldi	r20, 0x01	; 1
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	06 2e       	mov	r0, r22
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <main+0x144>
 1d6:	44 0f       	add	r20, r20
 1d8:	55 1f       	adc	r21, r21
 1da:	0a 94       	dec	r0
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <main+0x140>
 1de:	84 2b       	or	r24, r20
 1e0:	85 b9       	out	0x05, r24	; 5
				  for(int i=0; i<delay_in_ms; i++)
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	07 c0       	rjmp	.+14     	; 0x1f6 <main+0x160>
 1e8:	ef e9       	ldi	r30, 0x9F	; 159
 1ea:	ff e0       	ldi	r31, 0x0F	; 15
 1ec:	31 97       	sbiw	r30, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <main+0x156>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x15c>
 1f2:	00 00       	nop
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1fa:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1fe:	82 17       	cp	r24, r18
 200:	93 07       	cpc	r25, r19
 202:	94 f3       	brlt	.-28     	; 0x1e8 <main+0x152>
				  {
					  _delay_ms(1);
				  }
				  PORTB &= ~(1<<i);
 204:	85 b1       	in	r24, 0x05	; 5
 206:	40 95       	com	r20
 208:	48 23       	and	r20, r24
 20a:	45 b9       	out	0x05, r20	; 5
				}
				PORTB &= ~(1<<i);
			}	
		} else
		{
			for(int i = 5; i >= 0; i--)
 20c:	61 50       	subi	r22, 0x01	; 1
 20e:	71 09       	sbc	r23, r1
 210:	77 23       	and	r23, r23
 212:	e4 f6       	brge	.-72     	; 0x1cc <main+0x136>
 214:	4c cf       	rjmp	.-360    	; 0xae <main+0x18>

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>


Analog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a1  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000610  00000000  00000000  00000891  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026f  00000000  00000000  00000ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000367  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000068  00000000  00000000  0000149b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001503  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define F_CPU (16000000UL)
#include <avr/io.h>
int main(void)
{
	// PB0 - PB5 output, rest input
	DDRB = 0b00111111;
  80:	8f e3       	ldi	r24, 0x3F	; 63
  82:	84 b9       	out	0x04, r24	; 4
	// ADC Multiplexer Selection Register:
	// REFS[1:0] = 01 : AV_CC with external capacitor at AREF pin
	// ADLAR = 0 : Right adjust result
	// MUX[3:0] = 0000 : Select channel ADC0
	//ADMUX = (1<<REFS0);
	ADMUX = (1<<REFS0);
  84:	ec e7       	ldi	r30, 0x7C	; 124
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 e4       	ldi	r24, 0x40	; 64
  8a:	80 83       	st	Z, r24
	
	// set adc pin A1
	ADMUX |= (1<<MUX0); 
  8c:	80 81       	ld	r24, Z
  8e:	81 60       	ori	r24, 0x01	; 1
  90:	80 83       	st	Z, r24
	// ADSC = 0 : Do not start a conversion
	// ADATE = 0 : Auto triggering disabled
	// ADIF = 0 : Do not clear the interrupt flag
	// ADIE = 0 : Do not enable interrupts
	// ADPS[2:0] = 111 : Prescaler division factor 128
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  92:	87 e8       	ldi	r24, 0x87	; 135
  94:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	while (1)
	{
		// Start a conversion (making sure all other bits do not change)
		ADCSRA |= (1<<ADSC);
  98:	ea e7       	ldi	r30, 0x7A	; 122
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	80 83       	st	Z, r24
		
		// Wait for the conversion to complete by polling the ADSC bit
		while((ADCSRA & (1<<ADSC)) != 0)
  a2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  a6:	86 fd       	sbrc	r24, 6
  a8:	fc cf       	rjmp	.-8      	; 0xa2 <main+0x22>
		{;}
		
		// Read the result
		uint16_t val = ADC;
  aa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  ae:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		
		// Visualize the result
		if (val < 146) { PORTB = 0b00000000; }
  b2:	82 39       	cpi	r24, 0x92	; 146
  b4:	91 05       	cpc	r25, r1
  b6:	10 f4       	brcc	.+4      	; 0xbc <main+0x3c>
  b8:	15 b8       	out	0x05, r1	; 5
  ba:	ee cf       	rjmp	.-36     	; 0x98 <main+0x18>
		else if (val < 293) { PORTB = 0b00000001; }
  bc:	85 32       	cpi	r24, 0x25	; 37
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	92 07       	cpc	r25, r18
  c2:	18 f4       	brcc	.+6      	; 0xca <main+0x4a>
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	85 b9       	out	0x05, r24	; 5
  c8:	e7 cf       	rjmp	.-50     	; 0x98 <main+0x18>
		else if (val < 439) { PORTB = 0b00000011; }
  ca:	87 3b       	cpi	r24, 0xB7	; 183
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	92 07       	cpc	r25, r18
  d0:	18 f4       	brcc	.+6      	; 0xd8 <main+0x58>
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	e0 cf       	rjmp	.-64     	; 0x98 <main+0x18>
		else if (val < 585) { PORTB = 0b00000111; }
  d8:	89 34       	cpi	r24, 0x49	; 73
  da:	22 e0       	ldi	r18, 0x02	; 2
  dc:	92 07       	cpc	r25, r18
  de:	18 f4       	brcc	.+6      	; 0xe6 <main+0x66>
  e0:	87 e0       	ldi	r24, 0x07	; 7
  e2:	85 b9       	out	0x05, r24	; 5
  e4:	d9 cf       	rjmp	.-78     	; 0x98 <main+0x18>
		else if (val < 731) { PORTB = 0b00001111; }
  e6:	8b 3d       	cpi	r24, 0xDB	; 219
  e8:	22 e0       	ldi	r18, 0x02	; 2
  ea:	92 07       	cpc	r25, r18
  ec:	18 f4       	brcc	.+6      	; 0xf4 <main+0x74>
  ee:	8f e0       	ldi	r24, 0x0F	; 15
  f0:	85 b9       	out	0x05, r24	; 5
  f2:	d2 cf       	rjmp	.-92     	; 0x98 <main+0x18>
		else if (val < 878) { PORTB = 0b00011111; }
  f4:	8e 36       	cpi	r24, 0x6E	; 110
  f6:	93 40       	sbci	r25, 0x03	; 3
  f8:	18 f4       	brcc	.+6      	; 0x100 <main+0x80>
  fa:	8f e1       	ldi	r24, 0x1F	; 31
  fc:	85 b9       	out	0x05, r24	; 5
  fe:	cc cf       	rjmp	.-104    	; 0x98 <main+0x18>
		else { PORTB = 0b00111111; }
 100:	8f e3       	ldi	r24, 0x3F	; 63
 102:	85 b9       	out	0x05, r24	; 5
 104:	c9 cf       	rjmp	.-110    	; 0x98 <main+0x18>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
